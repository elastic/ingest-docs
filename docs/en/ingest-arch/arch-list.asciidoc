[[use-case-arch]]
== Ingest architectures

We offer a variety of ingest architectures to serve a wide range of use cases and network configurations. 

To ingest data into {es}, use the _simplest option that meets your needs_ and satisfies your use case.
For many users and use cases, the simplest approach is ingesting data with {agent} and sending it to {es}.
{agent} and https://www.elastic.co/integrations/[{agent} integrations] are available for many popular platforms and services, and are a good place to start. 

TIP: You can host {es} on your own hardware or send your data to {es} on {ecloud}. 
For most users, {agent} writing directly to {es} on {ecloud} provides the easiest and fastest time to value. {ess-leadin-short}



**Decision tree**

https://www.elastic.co/guide/en/cloud/current/ec-cloud-ingest-data.html#ec-data-ingest-pipeline[Data ingestion pipeline with decision tree]

/////
ToDo: Set up target as a tagged region and it re-use here.
With this approach, we can display the decision tree diagram here w/o requiring user to click a link.
Eventually, we may move original here, but for now it needs to stay in cloud info.  It's getting lots of hits and performing well. 
/////

[cols="50, 50"]
|===
| *Ingest architecture* | *Use when*

| <<agent-to-es>>

image:images/ea-es.png[Image showing {agent} collecting data and sending to {es}]

a| 
An {integrations-docs}[{agent} integration] is available for your data source: 

* Software components with <<agent-installed,{agent} installed>>
* Software components using <<agent-apis,APIs for data collection>>


| <<agent-ls>>

image:images/ea-ls-es.png[Image showing {agent} to {ls} to {es}]

a|
You need additional capabilities offered by {ls}:

* <<ls-enrich,*enrichment*>> between {agent} and {es}
* <<lspq,*persistent queue (PQ) buffering*>> to accommodate network issues and downstream unavailability
* <<ls-networkbridge,*proxying*>> in cases where {agent}s have network restrictions for connecting outside of the {agent} network 
* data needs to be <<ls-multi,*routed to multiple*>> {es} clusters and other destinations depending on the content


| <<agent-proxy>>

image:images/ea-proxy-es.png[Image showing connections between {agent} and {es} using a proxy]

a|
Agents have <<agent-proxy,network restrictions>> that prevent connecting outside of the {agent} network
Note that <<ls-networkbridge,{ls} as proxy>> is one option.


| <<agent-kafka-es>>

image:images/ea-kafka.png[Image showing {agent} collecting data and using Kafka as a message queue enroute to {es}]

a|
Kafka is your <<agent-kafka-es,middleware message queue>>: 

* <<agent-kafka-essink,Kafka ES sink connector>> to write from Kafka to {es}
* <<agent-kafka-ls,{ls} to read from Kafka and route to {es}>>


| <<ls-for-input>>

image:images/ls-es.png[Image showing {ls} collecting data and sending to {es}]

a|
You need to collect data from a source that {agent} can't read (such as databases, AWS Kinesis).
Check out the {logstash-ref}/input-plugins.html[{ls} input plugins].


| <<airgapped-env>>

image:images/ea-airgapped.png[Image showing {stack} in an air-gapped environment]

a|
You want to deploy {agent} and {stack} in an air-gapped environment (no access to outside networks)

|===
