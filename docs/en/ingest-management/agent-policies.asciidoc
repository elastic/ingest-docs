:y: image:images/green-check.svg[yes]
:n: image:images/red-x.svg[no]

[[agent-policy]]
= {agent} policies

++++
<titleabbrev>Policies</titleabbrev>
++++

A policy is a collection of inputs and settings that defines the data to be collected
by an {agent}. Each {agent} can only be enrolled in a single policy.

Within an {agent} policy is a set of individual integration policies.
These integration policies define the settings for each input type.
The available settings in an integration depend on the version of
the integration in use.

{fleet} uses {agent} policies in two ways:

* Policies are stored in a plain-text YAML file and sent to each {agent} to configure its inputs.
* Policies provide a visual representation of an {agent}s configuration
in the {fleet} UI.

[discrete]
[[policy-benefits]]
== Policy benefits

{agent} policies have many benefits that allow you to:

* Apply a logical grouping of inputs aimed for a particular set of hosts.
* Maintain flexibility in large-scale deployments by quickly testing changes before rolling them out.
* Provide a way to group and manage larger swaths of your infrastructure landscape.

For example, it might make sense to create a policy per operating system type:
Windows, macOS, and Linux hosts.
Or, organize policies by functional groupings of how the hosts are
used: IT email servers, Linux servers, user work-stations, etc.
Or perhaps by user categories: engineering department, marketing department, etc.

[discrete]
[[agent-policy-types]]
== Policy types

In most use cases, {fleet} provides complete central management of {agent}s.
However some use cases, like running in Kubernetes or using our hosted {ess} on {ecloud},
require {agent} infrastructure management outside of {fleet}.
With this in mind, there are two types of {agent} policies:

* **regular policy**: The default use case, where {fleet} provides full central
management for {agent}s. Users can manage {agent} infrastructure by adding,
removing, or upgrading {agent}s. Users can also manage {agent} configuration by updating
the {agent} policy.

* **hosted policy**: A policy where _something else_ provides central management for {agent}s.
For example, in Kubernetes, adding, removing, and upgrading {agent}s should be configured directly in Kubernetes.
Allowing {fleet} users to manage {agent}s would conflict with any Kubernetes configuration.
+
TIP: Hosted policies also apply when using our hosted {ess} on {ecloud}.
{ecloud} is responsible for hosting {agent}s and assigning them to a policy.
Platform operators, who create and manage Elastic deployments can add, upgrade,
and remove {agent}s through the {ecloud} console.

Hosted policies display a lock icon in the {fleet} UI, and actions are restricted.
The following table illustrates the {fleet} user actions available to different policy types:

[options,header]
|===
|{fleet} user action |Regular policy |Hosted policy

|<<create-a-policy,Create a policy>>
|{y}
|{n}

|<<add-integration,Add an integration>>
|{y}
|{n}

|<<apply-a-policy,Apply a policy>>
|{y}
|{n}

|<<policy-edit-or-delete,Edit or delete an integration>>
|{y}
|{n}

|<<copy-policy,Copy a policy>>
|{y}
|{n}

|<<policy-main-settings,Edit or delete a policy>>
|{y}
|{n}

|<<change-policy-enable-agent-monitoring,Enable agent monitoring>>
|{y}
|{n}

|<<change-policy-output,Change the output of a policy>>
|{y}
|{n}

|<<add-fleet-server-to-policy>>
|{y}
|{n}

|<<agent-policy-secret-values>>
|{y}
|{n}

|<<agent-policy-limit-cpu>>
|{y}
|{n}

|<<agent-policy-http-monitoring>>
|{y}
|{n}

|<<agent-policy-log-level>>
|{y}
|{n}
|===

See also the <<agent-policy-scale,recommended scaling options>> for an {agent} policy.

[discrete]
[[create-a-policy]]
== Create a policy

To manage your {agent}s and the data they collect, create a new policy:

In {fleet}, open the **Agent policies** tab and click **Create agent policy**.
. Name your policy. All other fields are optional and can be modified later.
By default, each policy enables the _system_ integration, which collects system information and metrics.
+
[role="screenshot"]
image::images/create-agent-policy.png[{fleet} in {kib}]
+
. Create the agent policy:
* To use the UI, click **Create agent policy**.
* To use the {fleet} API, click **Preview API request** and run the
request.

Also see <<create-a-policy-no-ui>>.

[discrete]
[[add-integration]]
== Add an integration to a policy

Policies consist of one or more integrations.
To add a new integration to a policy:

. In {fleet}, click **Agent policies**.
Click the name of the policy you want to add an integration to.

. Click **Add integration**.

. Search for and select an integration. You can select a category to narrow your search.

. ClickÂ **Add <Integration>**.

. Name the integration and add any required configuration variables.
+
NOTE: Integration policy names must be globally unique across all agent
policies.

. Save the integration policy as part of the larger {agent} policy:
+
--
* To use the UI, click **Save and continue**.
* To use the {fleet} API, click **Preview API request** and run the
request.
--

{fleet} distributes this new policy to all {agent}s that are enrolled in the
{agent} policy.

After the policy has finished applying, the selected integration will be running on the host
and communicating with the {agent}.

[discrete]
[[apply-a-policy]]
== Apply a policy

You can apply policies to one or more {agent}s.
To apply a policy:

. In {fleet}, click **Agents**.

. Select the {agent}s you want to assign to the new policy.
+
After selecting one or more {agent}s, click **Assign to new policy** under the
Actions menu.
+
[role="screenshot"]
image::images/apply-agent-policy.png[Assign to new policy dropdown]
+
Unable to select multiple agents? Confirm that your subscription level supports
selective agent policy reassignment in {fleet}. For more information, refer to
{subscriptions}[{stack} subscriptions].

. Select the {agent} policy from the dropdown list, and click **Assign policy**.

The {agent} status indicator and {agent} logs indicate that the policy is being applied.
It may take a few minutes for the policy change to complete before the {agent} status updates to "Healthy".

[discrete]
[[policy-edit-or-delete]]
== Edit or delete an integration policy

Integrations can easily be reconfigured or deleted.
To edit or delete an integration policy:

. In {fleet}, click **Agent policies**.
Click the name of the policy you want to edit or delete.

. Search or scroll to a specific integration.
Open the **Actions** menu and select **Edit integration** or **Delete integration**.
+
Editing or deleting an integration is permanent and cannot be undone.
If you make a mistake, you can always re-configure or re-add an integration.

Any saved changes are immediately distributed and applied to all {agent}s enrolled in the given policy.

To update any secret values in an integration policy, refer to <<agent-policy-secret-values>>.

[discrete]
[[copy-policy]]
== Copy a policy

Policy definitions are stored in a plain-text YAML file that can be downloaded or copied to another policy:

. In {fleet}, click **Agent policies**.
Click the name of the policy you want to copy or download.

. To copy a policy, click **Actions -> Copy policy**.
Name the new policy, and provide a description.
The exact policy definition is copied to the new policy.
+
Alternatively, view and download the policy definition by clicking **Actions -> View policy**.

[discrete]
[[policy-main-settings]]
== Edit or delete a policy

You can change high-level configurations like a policy's name, description, default namespace,
and agent monitoring status as necessary:

. In {fleet}, click **Agent policies**.
Click the name of the policy you want to edit or delete.

. Click the **Settings** tab, make changes, and click **Save changes**
+
Alternatively, click **Delete policy** to delete the policy.
Existing data is not deleted.
Any agents assigned to a policy must be unenrolled or assigned to a different policy before a policy can be deleted.


[discrete]
[[change-policy-enable-agent-monitoring,Enable agent monitoring]]
== Enable agent monitoring

Use this setting to collect monitoring logs and metrics from {agent}. All monitoring data will be written to the specified **Default namespace**.

. In {fleet}, click **Agent policies**.
Select the name of the policy you want to edit.

. Click the **Settings** tab and scroll to **Enable agent monitorings**.

. Select whether to collect agent logs, agent metrics, or both, from the {agents} that use the policy.

When this setting is enabled an {agent} integration is created automatically.

[discrete]
[[change-policy-output]]
== Change the output of a policy

Assuming your {subscriptions}[{stack} subscription level] supports per-policy
outputs, you can change the output of a policy to send data to a different
output.

. In {fleet}, click **Settings** and view the list of available outputs.
If necessary, click **Add output** to add a new output with the settings you
require. For more information, refer to <<output-settings>>.

. Click **Agent policies**.
Click the name of the policy you want to change, then click **Settings**.

. Set **Output for integrations** and (optionally) **Output for agent monitoring**
to use a different output, for example, {ls}. You might need to scroll down to
see these options.
+
Unable to select a different output? Confirm that your subscription level
supports per-policy outputs in {fleet}.
+
[role="screenshot"]
image::images/agent-output-settings.png[Screen capture showing the {ls} output policy selected in an agent policy]

. Save your changes.

Any {agent}s enrolled in the agent policy will begin sending data to the
specified outputs.

[discrete]
[[add-fleet-server-to-policy]]
== Add a {fleet-server} to a policy

If you want to connect multiple agents to a specific on-premises {fleet-server},
you can add that {fleet-server} to a policy.

[role="screenshot"]
image::images/add-fleet-server-to-policy.png[Screen capture showing how to add a {fleet-server} to a policy when creating or updating the policy.]

When the policy is saved, all agents assigned to the policy are configured
to use the new {fleet-server} as the controller.

Make sure that the {agent}s assigned to this policy all have connectivity to the {fleet-server}
that you added. Lack of connectivity will prevent the {agent}
from checking in with the {fleet-server} and receiving policy updates, but the agents
will still forward data to the cluster.

[discrete]
[[agent-policy-secret-values]]
== Configure secret values in a policy

When you create an integration policy you often need to provide sensitive information such as an API key or a password. To help ensure that data can't be accessed inappropriately, any secret values used in an integration policy are stored separately from other policy details.

As well, after you've saved a secret value in {fleet}, the value is hidden in both the {fleet} UI and in the agent policy definition. When you view the agent policy (**Actions -> View policy**), an environment variable is displayed in place of any secret values, for example `${SECRET_0}`.

WARNING: In order for sensitive values to be stored secretly in {fleet}, all configured {fleet-server}s must be on version 8.10.0 or higher.

Though secret values stored in {fleet} are hidden, they can be updated. To update a secret value in an integration policy:

. In {fleet}, click **Agent policies**.
Select the name of the policy you want to edit.

. Search or scroll to a specific integration.
Open the **Actions** menu and select **Edit integration**. Any secret information is marked as being hidden.

. Click the link to replace the secret value with a new one.
+
[role="screenshot"]
image::images/fleet-policy-hidden-secret.png[Screen capture showing a hidden secret value as part of an integration policy]
// This graphic should be updated once a higher resolution version is available.

. Click **Save integration**. The original secret value is overwritten in the policy.

[discrete]
[[agent-policy-limit-cpu]]
== Set the maximum CPU usage

You can limit the amount of CPU consumed by {agent}. This parameter limits the number of operating system threads that can be executing Go code simultaneously in each Go process. You can specify an integer value not less than `0`, which is the default value that stands for "all available CPUs".

This limit applies independently to the agent and each underlying Go process that it supervises. For example, if {agent} is configured to supervise two {beats} with a CPU usage limit of `2` set in the policy, then the total CPU limit is six, where each of the three processes (one {agent} and two {beats}) may execute independently on two CPUs.

This setting is similar to the {beats} {filebeat-ref}/configuration-general-options.html#_max_procs[`max_procs`] setting. For more detail, refer to the link:https://pkg.go.dev/runtime#GOMAXPROCS[GOMAXPROCS] function in the Go runtime documentation.

. In {fleet}, click **Agent policies**.
Select the name of the policy you want to edit.

. Click the **Settings** tab and scroll to **Advanced settings**.

. Set **Limit CPU usage** as needed. For example, to limit Go processes supervised by {agent} to two operating system threads each, set this value to `2`.

[discrete]
[[agent-policy-http-monitoring]]
== Override the default monitoring port

You can override the default port that {agent} uses to send monitoring data. It's useful to be able to adjust this setting if you have an application running on the machine on which the agent is deployed, and that is using the same port.

. In {fleet}, click **Agent policies**.
Select the name of the policy you want to edit.

. Click the **Settings** tab and scroll to **Advanced settings**.

//. Set **Agent HTTP monitoring** setting to enabled, and then specify a host and port for the monitoring data output.
. Specify a host and port for the monitoring data output.

//. Enable **buffer.enabled** if you'd like {agent} and {beats} to collect metrics into an in-memory buffer and expose these through a `/buffer` endpoint. This data can be useful for debugging or if the {agent} has issues communicating with {es}. Enabling this option may slightly increase process memory usage.

[discrete]
[[agent-policy-log-level]]
== Set the {agent} log level

You can set the minimum log level that {agents} using the selected policy will send to the configured output. The default setting is `info`.

. In {fleet}, click **Agent policies**.
Select the name of the policy you want to edit.

. Click the **Settings** tab and scroll to **Advanced settings**.

. Set the **Agent logging level**.

. Save your changes. 

You can also set the log level for an individual agent:

. In {fleet}, click **Agents**.
Under the **Host** header, select the {agent} you want to edit.

. On the **Logs** tab, set the **Agent logging level** and apply your changes. Or, you can choose to reset the agent to use the logging level specified in the agent policy.

[discrete]
[[agent-policy-scale]]
== Policy scaling recommendations

A single instance of {fleet} supports a maximum of 500 {agent} policies. If more policies are configured, UI performance might be impacted.
