[[kafka-output-settings]]
= Kafka output settings

Specify these settings to send data over a secure connection to Logstash. 

preview::[]

[discrete]
== General settings

[cols="2*<a"]
|===
|
[id="kafka-output-version"]
**Kafka version**

| The Kafka protocol version that {agent} will request when connecting. 
Defaults to 1.0.0.

// =============================================================================

|
[id="kafka-output-hosts"]
**Hosts**

| The addresses your {agent}s will use to connect to one or more Kafka brokers. 
Use the format `host:port`. Click **add** row to specify additional addresses.

**Examples:**

* `https://localhost:9092`
* `mykafkahost:9092` 
// Is this the correct port number? The definition doc says 9092 and the demo shows 2301.

|===

[discrete]
== Authentication settings

Select the method by which {agent} will authenticate with Kafka.

[cols="2*<a"]
|===
|
[id="kafka-output-authentication-basic"]
**Username / Password**

| Authenticate using a username and password.

Provide your username and password, and select a Simple Authentication and Security Layer (SASL) mechanism for your login credentials:

* Plain
* SCRAM-SHA-256
* SCRAM-SHA-512

// =============================================================================

|
[id="kafka-output-authentication-ssl"]
**SSL**

| Authenticate using the Secure Sockets Layer (SSL) protocol. Provide the following details for your SSL certificate:

Server SSL certificate authorities::
The CA certificate to use to connect to Kafka. This is the CA used to generate the certificate and key for Kafka. Copy and paste in the full contents for the CA certificate.
+
This setting is optional.

Client SSL certificate:: The certificate generated for the client. Copy and paste in the full contents of the certificate. This is the certificate that all the agents will use to connect to Kafka.
+
In cases where each client has a unique certificate, the local path to that certificate can be placed here. The agents will pick the certificate in that location when establishing a connection to Kafka.

Client SSL certificate key:: The private key generated for the client. This must be in PKCS 8 key. Copy and paste in the full contents of the certificate key. This is the certificate key that all the agents will use to connect to Kafka.
+
In cases where each client has a unique certificate key, the local path to that certificate key can be placed here. The agents will pick the certificate key in that location when establishing a connection to Kafka.

// =============================================================================

|
[id="kafka-output-authentication-kerberos"]
**Kerberos**

| Use Kerberos to manage authentication between {agent} and Kafka.

|===

[discrete]
== Partitioning settings

[cols="2*<a"]
|===

|
[id="kafka-output-partitioning-random"]
**Random**

| Record records to partitions randomly. Specify the number of events to be published to the same partition before the partitioner selects a new partition.

// =============================================================================

|
[id="kafka-output-partitioning-roundrobin"]
**Round robin**

| Record records to partitions in a round-robin fashion. Specify the number of events to be published to the same partition before the partitioner selects a new partition.

// =============================================================================

|
[id="kafka-output-partitioning-hash"]
**Hash**

| Record records to partitions based on a hash computed from the specified list of fields.

|===

[discrete]
== Topics settings

[cols="2*<a"]
|===

|
[id="kafka-output-topics-default"]
**Default topic**

TBD

// =============================================================================

|
[id="kafka-output-topics-processors"]
**Processors**

TBD

The following conditions are supported:

`equals`::
tbd

`contains`::
tbd

`regexp`::
tbd

`range`::
tbd

`network`::
tbd

`has_fields`::
tbd

`or`::
tbd

`and`::
tbd

`not`::
tbd

|===


